input {
  file {
    path => "/logs/message*"
    start_position => "beginning"
    type => "syslog"
  }
  file {
    path => "/logs/httpd/access_*"
    start_position => "beginning"
    type => "apache"
  }
  file {
    type => "varnish-access"
    path => ["/logs/varnish/varnishncsa.*"]
    start_position => "beginning"
  }
  file {
    path => ["/logs/maillo*"]
    start_position => "beginning"
    type => "postfix"
  }
  file {
    path => ["/logs/openhab.log"]
    start_position => "beginning"
    type => "openhab"
  }
  file {
    path => ["/logs/events.log"]
    start_position => "beginning"
    type => "openhab"
  }
  file {
    path => ["/logs/sabnzbd.*"]
    start_position => "beginning"
    type => "sabnzbd"
  }

 }
filter {
  if [type] == "apache" {
    grok {
      pattern => "%{COMBINEDAPACHELOG}"
    }
  }
  if [type] == "syslog" {
    grok {
      pattern => "%{COMBINEDAPACHELOG}"
    }
  } 
  grok {
    type => "varnish-access"
    pattern => "%{COMBINEDAPACHELOG}"
  }
  grok {
    type => "postfix"
  patterns_dir => [ "/etc/logstash/grok-patterns.postfix" ]
        pattern => [
            "%{SYSLOGBASE} %{POSTFIXSMTPDCONNECTS}",
            "%{SYSLOGBASE} %{POSTFIXSMTPDACTIONS}",
            "%{SYSLOGBASE} %{POSTFIXSMTPDTIMEOUTS}",
            "%{SYSLOGBASE} %{POSTFIXSMTPDLOGIN}",
            "%{SYSLOGBASE} %{POSTFIXSMTPDCLIENT}",
            "%{SYSLOGBASE} %{POSTFIXSMTPRELAY}",
            "%{SYSLOGBASE} %{POSTFIXSMTPCONNECT}",
            "%{SYSLOGBASE} %{POSTFIXSMTP4XX}",
            "%{SYSLOGBASE} %{POSTFIXSMTP5XX}",
            "%{SYSLOGBASE} %{POSTFIXSMTPREFUSAL}",
            "%{SYSLOGBASE} %{POSTFIXSMTPLOSTCONNECTION}",
            "%{SYSLOGBASE} %{POSTFIXSMTPTIMEOUT}",
            "%{SYSLOGBASE} %{POSTFIXBOUNCE}",
            "%{SYSLOGBASE} %{POSTFIXQMGR}",
            "%{SYSLOGBASE} %{POSTFIXCLEANUP}"
        ]
        named_captures_only => true
  }
  grok {
    type => "openhab"
    match => { "message" => "%{TIME} %{WORD:level} %{DATA:object}- %{DATA:message}$" }
    match => { "message" => "%{DATA:datum} %{TIME} - %{WORD:item} state %{WORD:action} to %{DATA:value}$" }
  }
  grok {
    type => "sabnzbd"
    match => { "message" => "%{DATESTAMP}::%{WORD:level}::%{DATA:process} %{DATA:action}$" }
  }



}

output { 
  elasticsearch { host => es }  
 }
